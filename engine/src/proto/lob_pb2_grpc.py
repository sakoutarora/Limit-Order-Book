# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from src.proto import lob_pb2 as src_dot_proto_dot_lob__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in src/proto/lob_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitOrder = channel.stream_unary(
                '/orders.OrderService/SubmitOrder',
                request_serializer=src_dot_proto_dot_lob__pb2.OrderRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_lob__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.ModifyOrder = channel.stream_unary(
                '/orders.OrderService/ModifyOrder',
                request_serializer=src_dot_proto_dot_lob__pb2.ModifyOrderRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_lob__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.CancelOrder = channel.stream_unary(
                '/orders.OrderService/CancelOrder',
                request_serializer=src_dot_proto_dot_lob__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_lob__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.GetLob = channel.unary_unary(
                '/orders.OrderService/GetLob',
                request_serializer=src_dot_proto_dot_lob__pb2.LobRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_lob__pb2.LobResponse.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitOrder(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyOrder(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitOrder': grpc.stream_unary_rpc_method_handler(
                    servicer.SubmitOrder,
                    request_deserializer=src_dot_proto_dot_lob__pb2.OrderRequest.FromString,
                    response_serializer=src_dot_proto_dot_lob__pb2.OrderResponse.SerializeToString,
            ),
            'ModifyOrder': grpc.stream_unary_rpc_method_handler(
                    servicer.ModifyOrder,
                    request_deserializer=src_dot_proto_dot_lob__pb2.ModifyOrderRequest.FromString,
                    response_serializer=src_dot_proto_dot_lob__pb2.OrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.stream_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=src_dot_proto_dot_lob__pb2.CancelOrderRequest.FromString,
                    response_serializer=src_dot_proto_dot_lob__pb2.OrderResponse.SerializeToString,
            ),
            'GetLob': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLob,
                    request_deserializer=src_dot_proto_dot_lob__pb2.LobRequest.FromString,
                    response_serializer=src_dot_proto_dot_lob__pb2.LobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orders.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('orders.OrderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitOrder(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/orders.OrderService/SubmitOrder',
            src_dot_proto_dot_lob__pb2.OrderRequest.SerializeToString,
            src_dot_proto_dot_lob__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModifyOrder(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/orders.OrderService/ModifyOrder',
            src_dot_proto_dot_lob__pb2.ModifyOrderRequest.SerializeToString,
            src_dot_proto_dot_lob__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOrder(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/orders.OrderService/CancelOrder',
            src_dot_proto_dot_lob__pb2.CancelOrderRequest.SerializeToString,
            src_dot_proto_dot_lob__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orders.OrderService/GetLob',
            src_dot_proto_dot_lob__pb2.LobRequest.SerializeToString,
            src_dot_proto_dot_lob__pb2.LobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
